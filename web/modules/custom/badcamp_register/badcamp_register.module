<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;

/**
 * Implements hook_theme().
 */
function badcamp_register_theme($existing, $type, $theme, $path) {
  return [
    'registration_page' => [
      'variables' => [
        'step1active' => FALSE,
        'step2active' => FALSE,
        'step2active_swag' => FALSE,
        'step3active' => FALSE,
        'content' => NULL,
        'intro_message' => NULL,
      ],
      'template' => 'registration_page'
    ]
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_register_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'badcamp_register_redirect_submit';
	$form["field_user_social_profile_links"]["widget"][0]["#type"] = 'fieldset';
	$form["field_i_am_interested_in_drupal_"]['#prefix'] = '<div class="cell small-12">';
	$form["field_i_am_interested_in_drupal_"]['#suffix'] = '</div>';
	$form["field_i_m_interested_in_voluntee"]['#prefix'] = '<div class="cell small-12">';
	$form["field_i_m_interested_in_voluntee"]['#suffix'] = '</div>';
	$form["field_i_am_interested_in_hearing"]['#prefix'] = '<div class="cell small-12">';
	$form["field_i_am_interested_in_hearing"]['#suffix'] = '</div>';
	$form["field_list_my_account_on_attende"]['#prefix'] = '<div class="cell small-12">';
	$form["field_list_my_account_on_attende"]['#suffix'] = '</div>';
}

/**
 * Redirect First Time Login Users to Registration Page 2
 */
function badcamp_register_redirect_submit(&$form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  $redirect_url = \Drupal\Core\Url::fromRoute('badcamp_register.page_2');
  $form_state->setRedirectUrl($redirect_url);
}

/**
 * Implements hook_stripe_payment_successful_redirect_alter().
 */
function badcamp_register_stripe_payment_successful_redirect_alter(&$url, $entity, $current_route) {
  if($current_route['route'] == 'badcamp_register.page_2'){
    if($entity->getEntityTypeId() == 'stripe_payment' && $entity->bundle() == 'individual_sponsorship' && ((int)$entity->get('amount')->getString() > 0)) {
      $url = \Drupal\Core\Url::fromRoute('badcamp_register.page_2_swag')->toString();
    }else{
      $url = \Drupal\Core\Url::fromRoute('badcamp_register.page_3')->toString();
    }
  }
}

/**
 * Implements hook_badcamp_swag_selector_form_complete_alter().
 */
function badcamp_register_badcamp_swag_selector_form_complete_alter(&$url, $payment) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  if ($current_route == 'badcamp_register.page_2_swag') {
    $url = 'badcamp_register.page_3';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_register_form_node_session_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	$form['#title'] = t('Edit Session');
	$form['actions']['submit']['#value'] = t('Save');

	$node = $form_state->getFormObject()->getEntity();
	if ($node->isNew()) {
		$user = \Drupal::currentUser();
		$form['#title'] = t('Submit Session');
		$form['actions']['submit']['#value'] = t('Submit Session');
		$form['field_speakers']['widget'][0]['target_id']['#default_value'] = \Drupal\user\Entity\User::load($user->id());
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_register_form_node_sponsor_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	$form['revision_information']['#access'] = false;
	$form['status']['#access'] = true;
	$form['status']['widget']['value']['#title'] = t('Publish');
}

/**
 * Implements hook_entity_type_alter().
 */
function badcamp_register_entity_type_alter(array &$entity_types) {
	// We get all form modes, for all entities, and loop through them.
	$form_modes = \Drupal::service('entity_display.repository')->getAllFormModes();
	foreach ($form_modes as $entity_type => $display_modes) {
		if ($entity_type !== 'node') {
			// We are only interested in adding a handler to the Node entity.
			continue;
		}

		$node_type = $entity_types[$entity_type];
		foreach ($display_modes as $machine_name => $form_display) {
			if ($machine_name !== 'user_entry') {
				// We are only interested in adding this form mode to the definition.
				continue;
			}
			// We get the default handler class. It will be enough for us.
			$default_handler_class = $node_type->getHandlerClasses()['form']['default'];
			// We set the form class, keyed by the machine name of our custom form mode.
			$node_type->setFormClass($machine_name, $default_handler_class);
		}
	}
}

/**
 * Implements hook_entity_insert().
 */
function badcamp_register_entity_insert(EntityInterface $entity) {
	if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'session') {
		drupal_set_message(t('Thank you for your submission!'));
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_register_form_node_job_posting_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	badcamp_register_alter_job_posting_form($form, $form_state, $form_id);
	$form['#validate'][] = 'badcamp_register_job_post_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_register_form_node_job_posting_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	badcamp_register_alter_job_posting_form($form, $form_state, $form_id);
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 */
function badcamp_register_job_post_validate(&$form, FormStateInterface $formState){
	$company_id = $formState->getValue('field_company');
	$company = \Drupal\node\Entity\Node::load($company_id[0]['target_id']);
	$company_addl = (int)$company->get('field_additional_job_postings')->getString();
	/** @var \Drupal\taxonomy\TermInterface $level */
	$level = $company->get('field_sponsor_level')->first()->get('entity')->getTarget()->getValue();
	$level_limit = (int)$level->get('field_max_job_postings')->getString();
	$jobs = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
		'field_company' => $company_id[0]['target_id'],
	]);

	if($level_limit > 0 && (count($jobs) >= ($level_limit + $company_addl))){
		$message = t('%name is only allowed %number job posting.<br/>Contact anne@badcamp.net for additional postings.', [
			'%name' => $company->getTitle(),
			'%number' => ($level_limit + $company_addl)
		]);
		$formState->setErrorByName('field_company', $message);
	}
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function badcamp_register_alter_job_posting_form(&$form, FormStateInterface $form_state, $form_id) {
	$account = \Drupal::currentUser();
	if(!$account->hasPermission('edit any job_posting content')) {
		$sponsors = badcamp_register_get_user_sponsors($account);
		foreach($form['field_company']['widget']['#options'] AS $id => $company){
			if(!isset($sponsors[$id])){
				unset($form['field_company']['widget']['#options'][$id]);
			}
		}
	}
}

/**
 * Implements hook_node_access_records().
 */
function badcamp_register_node_access_records(NodeInterface $node) {
	$grants = [];

	switch($node->bundle()){
		case 'sponsor':
			$grants[] = [
				'realm' => 'sponsors',
				'gid' => $node->id(),
				'grant_view' => 1,
				'grant_update' => 1,
				'grant_delete' => 0
			];
			break;
		case 'training':
			foreach ($node->get('field_trainers')->getValue() AS $id) {
				$grants[] = [
					'realm' => 'trainer',
					'gid' => $id['target_id'],
					'grant_view' => 1,
					'grant_update' => 1,
					'grant_delete' => 0
				];
			}
			break;

		case 'job_posting':
			/** @var NodeInterface $entity */
			$entity = $node->get('field_company')->first()->get('entity')->getTarget()->getValue();
			$grants[] = [
				'realm' => 'sponsors',
				'gid' => $entity->id(),
				'grant_view' => 1,
				'grant_update' => 1,
				'grant_delete' => 0
			];
			break;

		case 'summit':
			foreach ($node->get('field_summit_leaders')->getValue() AS $id) {
				$grants[] = [
					'realm' => 'summit_leader',
					'gid' => $id['target_id'],
					'grant_view' => 1,
					'grant_update' => 1,
					'grant_delete' => 0
				];
			}
			break;
	}

	if($node->isPublished()) {
		$grants[] = [
			'realm' => 'all',
			'gid' => 0,
			'grant_view' => 1,
			'grant_update' => 0,
			'grant_delete' => 0
		];
	} else {
		$grants[] = [
			'realm' => 'unpublished',
			'gid' => $node->getOwnerId(),
			'grant_view' => 1,
			'grant_update' => 0,
			'grant_delete' => 0
		];
	}

	return $grants;
}

/**
 * Implements hook_node_grants().
 */
function badcamp_register_node_grants(AccountInterface $account, $op) {
	$grants = [];

	if($account->isAuthenticated()){
		$grants['trainer'] = array(
			$account->id()
		);
		$grants['summit_leader'] = array(
			$account->id()
		);

		$sponsors = badcamp_register_get_user_sponsors($account);
		$grants['sponsors'] = array_keys($sponsors);
	}

	$grants['all'] = [0];

	if($account->hasPermission('view own unpublished content')){
		$grants['unpublished'] = [
			$account->id()
		];
	}

	return $grants;
}

/**
 * @param $account
 *
 * @return \Drupal\Core\Entity\EntityInterface[]
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function badcamp_register_get_user_sponsors($account) {
	$sponsors = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
		'field_sponsor_members' => $account->id()
	]);
	return $sponsors;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function badcamp_register_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
	if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'sponsor' && $view_mode == 'full') {
		$view = \Drupal\views\Views::getView('job_board');
		$build['job_postings'] = $view->buildRenderable('embed_1');

		$view = \Drupal\views\Views::getView('attendees');
		$build['members'] = $view->buildRenderable('embed_1');

		$view = \Drupal\views\Views::getView('sponsored_events');
		$build['events'] = $view->buildRenderable('embed_1');
	}
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function badcamp_register_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
	$view = \Drupal\views\Views::getView('member_sponsors');
	$build['sponsors'] = $view->buildRenderable('embed_1',[$entity->id()]);
	$view = \Drupal\views\Views::getView('member_sponsors');
	$build['sessions'] = $view->buildRenderable('embed_2',[$entity->id()]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function badcamp_register_preprocess_user__full(&$variables) {
	$user = $variables['elements']['#user'];
	$results = views_get_view_result('member_sponsors', 'embed_1', $user->id());
	$variables['show_sponsors'] = count($results) > 0;
	$results = views_get_view_result('member_sponsors', 'embed_2', $user->id());
	$variables['show_sessions'] = count($results) > 0;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function badcamp_register_entity_extra_field_info() {
	$extra = [];
	$extra['user']['user']['display']['sponsors'] = [
		'label' => t('Sponsors'),
		'description' => t('List of all sponsors for user')
	];

	$extra['user']['user']['display']['sessions'] = [
		'label' => t('Sessions'),
		'description' => t('List of all sessions for user')
	];

	$extra['node']['sponsor']['display']['job_postings'] = [
		'label' => t('Job Postings'),
		'description' => t('List of all Job Postings for Sponsor')
	];

	$extra['node']['sponsor']['display']['members'] = [
		'label' => t('Members'),
		'description' => t('List of all Member for Sponsor')
	];

	$extra['node']['sponsor']['display']['events'] = [
		'label' => t('Events'),
		'description' => t('List of all Events for Sponsor')
	];
	return $extra;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function badcamp_register_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
	if($route_name == 'entity.node.canonical') {

		$node = \Drupal::routeMatch()->getParameter('node');
		if ($node instanceof \Drupal\node\NodeInterface) {

			unset($data['tabs'][0]['entity.node.registrations']);

			if($node->bundle() == 'sponsor'){
				unset($data['tabs'][0]['views_view:view.summit_attendees.page_1']);
				unset($data['tabs'][0]['views_view:view.training_registrations.page_1']);
			}

			if($node->bundle() == 'training'){
				unset($data['tabs'][0]['views_view:view.summit_attendees.page_1']);
			}

			if($node->bundle() == 'summit'){
				unset($data['tabs'][0]['views_view:view.training_registrations.page_1']);
			}
		}
	}

	if ($route_name == 'camp_schedule.schedule_display') {

	}

	if ($route_name == 'entity.user.canonical') {
		$user = \Drupal::routeMatch()->getParameter('user');
		if ($user instanceof \Drupal\user\UserInterface) {
			$public_schedule = $user->get('field_user_public_schedule')->getString();
			if($public_schedule != 1) {
				unset($data[0]['views_view:view.schedule.page_2']);
			}
		}
	}
}

/**
 * Implements hook_module_implements_alter().
 */
function badcamp_register_module_implements_alter(&$implementations, $hook) {
	if($hook == 'link_alter') {
		unset($implementations['login_destination']);
	}

	if($hook == 'node_access_records') {
		$implementations = [
			'badcamp_register' => FALSE
		];
	}

	if($hook == 'menu_local_tasks_alter') {
		unset($implementations['camp_schedule']);
	}
}

/**
 * Implements hook_help().
 */
function badcamp_register_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
	$output = '';
	switch ($route_name) {
		case 'node.add':
		case 'entity.node.edit_form':
			/** @var NodeInterface $node  */
			$node = $route_match->getParameter('node');
			if ($node instanceof NodeInterface && $node->bundle() == 'sponsor') {
				$field = 'field_sponsor_level';
				/** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $referenceItem */
				$referenceItem = $node->get($field)->first();
				/** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entityReference */
				$entityReference = $referenceItem->get('entity');
				/** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $entityAdapter */
				$entityAdapter = $entityReference->getTarget();
				/** @var \Drupal\Core\Entity\EntityInterface $referencedEntity */
				$referencedEntity = $entityAdapter->getValue();
				if ($referencedEntity->label() == 'Supporting Level'){
					$output .= '<p>'. t('Fill out the following fields for your company\'s profile as a Supporting Sponsor.') . '</p>';
				}
			}
			break;
	}
	return $output;
}
