<?php

/**
 * @file
 * Functions to support theming in the badcamp_2018 theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function badcamp_2018_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function badcamp_2018_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function badcamp_2018_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function badcamp_2018_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function badcamp_2018_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function badcamp_2018_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function badcamp_2018_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function badcamp_2018_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function badcamp_2018_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function badcamp_2018_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function badcamp_2018_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';

}

/**
 * Implements hook_preprocess_select().
 */
function badcamp_2018_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function badcamp_2018_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function badcamp_2018_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function badcamp_2018_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function badcamp_2018_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 * Implements hook_form_alter().
 */
function badcamp_2018_form_mailchimp_signup_subscribe_block_2018_badcamp_signup_form_alter(&$form, &$form_state) {
  $form['description']['#prefix'] = '<p>';
  $form['description']['#suffix'] = '</p>';

  $form['mergevars']['EMAIL']['#title_display'] = 'invisible';
  $form['mergevars']['EMAIL']['#attributes']['placeholder'] = 'E-mail Address';

  $form['mergevars']['FNAME']['#title_display'] = 'invisible';
  $form['mergevars']['FNAME']['#attributes']['placeholder'] = 'First Name';

  $form['mergevars']['LNAME']['#title_display'] = 'invisible';
  $form['mergevars']['LNAME']['#attributes']['placeholder'] = 'Last Name';

  $form['container']['actions'] = $form['actions']['submit'];
  unset($form['actions']);
}

/**
 * Implements template_preprocess_node__node_type__node_display().
 */
function badcamp_2018_preprocess_node__sponsor__full(&$vars){
  $vars['sponsor_url'] = (!empty($vars['content']['field_sponsor_url'][0]) ? $vars['content']['field_sponsor_url'][0]['#url']->getUri() : '/sponsors');
  $vars['logo'] = $vars['content']['field_sponsor_logo'];
}

/**
 * Implements template_preprocess_views_view_unformatted__view__display().
 */
function badcamp_2018_preprocess_views_view_unformatted__sponsors__full_list(&$vars){

  $vars['level_class'] = HTML::cleanCssIdentifier(strtolower(strip_tags($vars['title'])));

  switch($vars['level_class']){
    case 'core-level':
      $vars['sizing_class'] = 'small-up-1 medium-up-3';
      break;
    case 'contrib-level':
    case 'supporting-level':
      $vars['sizing_class'] = 'small-up-2 medium-up-4';
      break;
  }
}