<?php

/**
 * @file
 * Functions to support theming in the badcamp_2018 theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function badcamp_2018_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function badcamp_2018_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function badcamp_2018_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function badcamp_2018_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function badcamp_2018_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function badcamp_2018_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function badcamp_2018_theme_suggestions_field_alter(array &$suggestions, array $variables) {
	$element = $variables['element'];
	$field_name = $element['#field_name'];
	$entity_type = $element['#entity_type'];
	$bundle = $element['#bundle'];
	$view_mode = $element['#view_mode'];
	$suggestions[] = 'field__' . $element['#view_mode'];
	$suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
	$suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
	$suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $bundle . '__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function badcamp_2018_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function badcamp_2018_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;

	$account = \Drupal::currentUser();
	if($account->isAnonymous() && in_array($variables['node']->getType(), ['event','session','summit'])){

		$url = Url::fromRoute('user.login', [], [
			'query' => [
				'destination' => Url::fromRoute('entity.node.canonical', ['node' => $variables['node']->id()])->getInternalPath()
			]
		]);
		$link = Link::fromTextAndUrl(t('Login to Register'), $url)->toRenderable();
		$link['#attributes']['class'][] = 'action-button';

		$variables['content']['register_button'] = [
			'#markup' => render($link),
			'#weight' => 10000
		];
	}
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function badcamp_2018_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function badcamp_2018_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';

}

/**
 * Implements hook_preprocess_select().
 */
function badcamp_2018_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function badcamp_2018_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function badcamp_2018_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function badcamp_2018_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function badcamp_2018_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 * Implements hook_form_alter().
 */
function badcamp_2018_form_mailchimp_signup_subscribe_block_2018_badcamp_signup_form_alter(&$form, &$form_state) {
  $form['description']['#prefix'] = '<p>';
  $form['description']['#suffix'] = '</p>';

  $form['mergevars']['EMAIL']['#title_display'] = 'invisible';
  $form['mergevars']['EMAIL']['#attributes']['placeholder'] = 'E-mail Address';

  $form['mergevars']['FNAME']['#title_display'] = 'invisible';
  $form['mergevars']['FNAME']['#attributes']['placeholder'] = 'First Name';

  $form['mergevars']['LNAME']['#title_display'] = 'invisible';
  $form['mergevars']['LNAME']['#attributes']['placeholder'] = 'Last Name';

  $form['actions']['submit']['#attributes']['class'][] = 'action-button';
  $form['container']['actions'] = $form['actions']['submit'];
  unset($form['actions']);
}

/**
 * Implements template_preprocess_node__node_type__node_display().
 */
function badcamp_2018_preprocess_node__sponsor__full(&$vars){
  $vars['sponsor_url'] = (!empty($vars['content']['field_sponsor_url'][0]) ? $vars['content']['field_sponsor_url'][0]['#url']->getUri() : '/sponsors');
  $vars['logo'] = $vars['content']['field_sponsor_logo'];
}

/**
 * Implements template_preprocess_views_view_unformatted__view__display().
 */
function badcamp_2018_preprocess_views_view_unformatted__sponsors__full_list(&$vars){

  $vars['level_class'] = HTML::cleanCssIdentifier(strtolower(strip_tags($vars['title'])));

  switch($vars['level_class']){
    case 'core-level':
      $vars['sizing_class'] = 'small-up-1 medium-up-3';
      break;
    default:
      $vars['sizing_class'] = 'small-up-2 medium-up-4';
      break;
  }
}

/**
 * Implements template_preprocess_page_title().
 */
function badcamp_2018_preprocess_page_title(&$vars){
	$node = \Drupal::request()->attributes->get('node');
	if(!is_null($node) && is_object($node)) {
		if ($node->getEntityTypeId() == 'node' && $node->bundle() == 'session') {
			$vars['title'] = t('Session');
		}
		else {
			if ($node->getEntityTypeId() == 'node' && $node->bundle() == 'training') {
				$vars['title'] = t('Training');
			}
		}
	}
}

/**
 * Implements hook_theme_suggestions_page_title_alter().
 */
function badcamp_2018_theme_suggestions_page_title_alter(&$suggestions, $vars) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $suggestions[] = 'page_title__' . str_ireplace('.','__', $route_name);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp_2018_theme_suggestions_user_alter(&$suggestions, $vars){
  $suggestions[] = 'user__' . $vars['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_user().
 */
function badcamp_2018_preprocess_user(&$vars) {
  $vars['org_url'] = (!empty($vars['content']['field_user_organization_website'][0]) ? $vars['content']['field_user_organization_website'][0]['#url']->getUri() : '');

  /** @var User $account */
  $account = $vars['elements']['#user'];

  $vars['username'] = $account->getDisplayName();
}

/**
 * Implements hook_node__node_type__view_mode().
 */
function badcamp_2018_preprocess_node__blog__teaser(&$vars) {
  $vars['date'] = $vars['node']->get('created')->getValue()[0]['value'];
  $vars['day_of_week'] = strtolower(date('D', strtotime($vars['date'])));
}

/**
 * Implements hook_preprocess_field();
 */
function badcamp_2018_preprocess_field__node__field_blog_tags__blog(&$vars){
  $vars['attributes']['class'][] = 'button-group';

  foreach($vars['items'] AS &$item){
    $item['content']['#attributes']['class'][] = 'button';
  }
}

/**
 * Implements template_preprocess_page_title__route().
 */
function badcamp_2018_preprocess_page_title__view__sponsors__full_list(&$vars) {
  $nid = \Drupal::config('badcamp_2018.settings')->get('sponsor_node');
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
  $vars['become_a_sponsor_published'] = (bool)$node->status->getString();
  $vars['sponsor_nid'] = $nid;
}

/**
 * Implements hook_form_alter().
 */
function badcamp_2018_form_views_exposed_form_alter(&$form, &$form_state) {
  switch($form['#id']){
    case 'views-exposed-form-attendees-page-1':
      $form['#attributes']['class'][] = 'grid-x';
      $form['#attributes']['class'][] = 'grid-margin-x';
      $form['first_name']['#prefix'] = '<div class="cell small-12 medium-4">';
      $form['first_name']['#suffix'] = '</div>';
      $form['last_name']['#prefix'] = '<div class="cell small-12 medium-4">';
      $form['last_name']['#suffix'] = '</div>';
      $form['organization']['#prefix'] = '<div class="cell small-12 medium-4">';
      $form['organization']['#suffix'] = '</div>';
      break;
  }
}

/**
 * @param $vars
 */
function badcamp_2018_preprocess_field_multiple_value_form(&$vars) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp_2018_theme_suggestions_bef_checkboxes_alter(&$suggestions, $vars){
	$suggestions[] = 'bef_checkboxes__' . str_ireplace('-', '_', $vars['element']['#name']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp_2018_theme_suggestions_form_element_alter(&$suggestions, $vars){
	if(isset($vars['element']['#name']) && stripos($vars['element']['#name'], 'session-track') !== FALSE){
		$suggestions[] = 'form_element__session_track';
	}
	if(isset($vars['element']['#name']) && stripos($vars['element']['#name'], 'skill') !== FALSE){
		$suggestions[] = 'form_element__skill';
	}
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp_2018_theme_suggestions_form_element_label_alter(&$suggestions, $vars){
	if(stripos($vars['element']['#id'], 'session-track') !== FALSE){
		$suggestions[] = 'form_element_label__session_track';
	}
	if(stripos($vars['element']['#id'], 'skill') !== FALSE){
		$suggestions[] = 'form_element_label__skill';
	}
	if(stripos($vars['element']['#id'], 'venue') !== FALSE){
		$suggestions[] = 'form_element_label__venue';
	}
}

function badcamp_2018_preprocess_form_element__session_track(&$vars) {
	$term_id = $vars['element']['#return_value'];
	$term = \Drupal::entityTypeManager()
		->getStorage('taxonomy_term')
		->load($term_id);
	$icon = $term->get('field_icon_class');
	if (!empty($icon_class = $icon->getValue())) {
		$vars['label']['#attributes']['data_icon'] = $icon_class[0]['value'];
	}
}

/**
 * Implements template_preprocess_field__HOOK().
 */
function badcamp_2018_preprocess_field__field_session_track(&$vars){
	$node = $vars['element']['#object'];

	foreach($node->get('field_session_track') AS $id => $term) {
		$full_term = $term->get('entity')->getTarget()->getValue();
		if(!empty($full_term->get('field_icon_class')->getValue())){
			$class = $full_term->get('field_icon_class')->first()->getValue()['value'];
			$vars['items'][$id]['icon_class'] = $class;
		}
	}
}

/**
 * Implements template_preprocess_field__HOOK().
 * @param $vars
 */
function badcamp_2018_preprocess_node__session(&$vars) {
	$node = $vars['node'];
	$status_field = $node->get('field_session_status')->getValue();
	$session_status = $status_field[0]['value'];

	switch ($session_status) {
		case "proposed":
			unset($vars['content']['flag_add_to_schedule']);
			break;
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_2018_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
	$form['disclaimer'] = [
		'#markup' => t("Don't have an account yet? Register for one %here.", [
			'%here' => Link::fromTextAndUrl(t('here'), Url::fromUserInput('/registration'))->toString()
		]),
		'#weight' => -100,
	];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function badcamp_2018_preprocess_field__field_timeslot(&$vars) {
	$node = $vars['element']['#object'];
	/** @var \Drupal\taxonomy\Entity\Term $timeslot */
	try {
		$timeslot = $node->get('field_timeslot')
			->first()
			->get('entity')
			->getTarget()
			->getValue();
		$parents = \Drupal::entityTypeManager()
			->getStorage('taxonomy_term')
			->loadParents($timeslot->id());
		$parent = array_shift($parents);
		$day = $parent->label();
		$time = $timeslot->label();
		$vars['items'][0]['content']['#plain_text'] = t('@day @time', [
			'@day' => $day,
			'@time' => $time
		]);
	}
	catch(\Exception $exception) {}
}
